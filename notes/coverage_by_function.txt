To see code coverage percentages by file instead of by directory in go test -cover, you need to use the -covermode=count flag and then process the output of the -coverprofile flag with the go tool cover command.

Here's the two-step process:

Step 1: Generate a Code Coverage Profile
========================================

First, run your tests and generate a coverage profile file. The -coverprofile flag tells the go test command to write the coverage data to a file.

go test -covermode=count -coverprofile=coverage.out ./...
    • go test: The command to run tests.
    • -covermode=count: This is a key flag. It tracks the number of times each statement is executed, which is necessary for a detailed report.
    • -coverprofile=coverage.out: This flag creates a file named coverage.out with the coverage data. You can name this file anything you want.
    • ./...: This pattern tells the command to run tests for all packages in the current directory and its subdirectories.

Step 2: Display the Per-File Report
===================================

Next, use the go tool cover command with the profile file you just created. The -func flag specifies that you want a function-level report, which includes the coverage for each file.

go tool cover -func=coverage.out

This command will produce a table that lists each Go source file, the number of functions in it, and the percentage of those functions that were covered by tests. The output will look something like this:
github.com/your/package/path/file1.go:    FunctionName1    90.0%
github.com/your/package/path/file2.go:    FunctionName2    75.5%
...
total:                (statements)    85.2%

This is the standard and most effective way to see coverage at a granular, per-file level.

